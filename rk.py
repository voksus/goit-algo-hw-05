"""
–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –†–∞–±—ñ–Ω–∞‚Äì–ö–∞—Ä–ø–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ base —ñ modulus.

–Ñ –¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à—É:
1) _polynomial_hash_pow ‚Äî –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π) –≤–∞—Ä—ñ–∞–Ω—Ç –∑ pow(...)
2) _polynomial_hash_fast ‚Äî –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—É–ø–æ–≤–µ –º–Ω–æ–∂–µ–Ω–Ω—è

–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É search() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è pow-–≤–∞—Ä—ñ–∞–Ω—Ç, —â–æ–±
–∑–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—É; –ø–æ—Ä—É—á –∑–∞–ª–∏—à–µ–Ω–æ –∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏
(ALTERNATIVE), —â–æ–± —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–∏—Å—è –Ω–∞ —à–≤–∏–¥–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.
"""
from __future__ import annotations


# -------------------------------
# –û–ë–ß–ò–°–õ–ï–ù–ù–Ø –•–ï–®–Ü–í (–î–í–ê –í–ê–†–Ü–ê–ù–¢–ò)
# -------------------------------
def _polynomial_hash_pow(s: str, base: int, modulus: int) -> int:
    """## –ü–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Ö–µ—à—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ pow(base, ...)

    ---
    #### –¶–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç –ø—Ä—è–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–ª–∞—Å–∏—á–Ω–æ–º—É –∫–æ–Ω—Å–ø–µ–∫—Ç–Ω–æ–º—É –æ–ø–∏—Å—É
    > üî∞ –ô–æ–≥–æ –ª–æ–≥—ñ–∫–∞: `h = sum(ord(s[i]) * base^(n-i-1)) % modulus`.

    üëáüèª _–ù–∏–∂—á–µ –±—ñ–ª—å—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º:_ `h = (h * base + ord(ch)) % modulus`  
    –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤ –º–µ—Ç–æ–¥—ñ `search()`. _(–¥–∏–≤. –¥–æ–∫—Å—Ç—Ä—ñ–Ω–≥–∏ —ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ)_
    """
    n = len(s)
    hash_value = 0
    for i, ch in enumerate(s):
        power_of_base = pow(base, n - i - 1, modulus)
        hash_value = (hash_value + ord(ch) * power_of_base) % modulus
    return hash_value


def _polynomial_hash_fast(s: str, base: int, modulus: int) -> int:
    """## –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∏–π —Ö–µ—à —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—É–ø–æ–≤–µ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è.

    ---
    #### –†–æ–∑—Ä–æ–±–∫–∞ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –®–Ü, —â–æ –≤–∏—è–≤–∏–ª–∞—Å—å –ø–æ–º—ñ—Ç–Ω–æ —à–≤–∏–¥—à–æ—é.
    > üî∞ –ô–æ–≥–æ –ª–æ–≥—ñ–∫–∞: `h = (h * base + ord(ch)) % modulus`

    ‚òùüèª _–í–∏—â–µ –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –∫–æ–Ω—Å–ø–µ–∫—Ç—É (–±—ñ–ª—å—à –ø–æ–≤—ñ–ª—å–Ω–∏–π):_ `h = sum(ord(s[i]) * base^(n-i-1)) % modulus`  
    –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤ –º–µ—Ç–æ–¥—ñ `search()`. _(–¥–∏–≤. –¥–æ–∫—Å—Ç—Ä—ñ–Ω–≥–∏ —ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ)_
    """
    h = 0
    for ch in s:
        h = (h * base + ord(ch)) % modulus
    return h


# –°–∞–º –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É
def search(text: str, pattern: str, base: int = 257, modulus: int = 1000003) -> int:
    """## –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è `pattern` —É `text` –∞–±–æ `-1`.

    #### _–ó–∞—É–≤–∞–∂–µ–Ω–Ω—è:_
    - –ó–º—ñ–Ω–Ω–∞`modulus` –º–∞—î –±—É—Ç–∏ –ø—Ä–æ—Å—Ç–∏–º –≤–µ–ª–∏–∫–∏–º —á–∏—Å–ª–æ–º, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫–æ–ª—ñ–∑—ñ–π;
    - –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è pow-–≤–∞—Ä—ñ–∞–Ω—Ç (–∫–æ–Ω—Å–ø–µ–∫—Ç–Ω–∏–π).  
      _(–º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, –¥–∏–≤–∏—Å—å –ø–æ–º—ñ—Ç–∫—É **"–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê"** –Ω–∏–∂—á–µ)_
    """
    n = len(text)
    m = len(pattern)
    if m == 0:
        return 0
    if m > n:
        return -1

    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pow-–≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫–∏–π –ø—Ä—è–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ–Ω—Å–ø–µ–∫—Ç—É.
    # -----------------------------------------------------------------------------
    # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê! –©–æ–± –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏—Å—è –Ω–∞ —à–≤–∏–¥–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏
    # –¥–≤–∞ —Ä—è–¥–∫–∏ –∫–æ–¥—É –Ω–∏–∂—á–µ, –∞ —Ü—ñ –∑–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏.
    # pattern_hash = _polynomial_hash_fast(pattern, base, modulus)
    # window_hash = _polynomial_hash_fast(text[:m], base, modulus)
    pattern_hash = _polynomial_hash_pow(pattern, base, modulus)
    window_hash = _polynomial_hash_pow(text[:m], base, modulus)


    # –ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ —Å–∏–º–≤–æ–ª—É: base^(m-1) % modulus
    h_multiplier = pow(base, m - 1, modulus)

    for i in range(n - m + 1):
        if pattern_hash == window_hash:
            # –ø—Ä–∏ –∑–±—ñ–≥—É —Ö–µ—à—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ—á–Ω–æ
            if text[i:i + m] == pattern:
                return i
        if i < n - m:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ–Ω–≥-—Ö–µ—à—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            left = (ord(text[i]) * h_multiplier) % modulus
            window_hash = (window_hash - left) % modulus
            window_hash = (window_hash * base + ord(text[i + m])) % modulus

    return -1