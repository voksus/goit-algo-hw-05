from __future__ import annotations


def compute_lps(pattern: str) -> list[int]:
    """## –ü–æ–±—É–¥–æ–≤–∞ LPS-–º–∞—Å–∏–≤—É (longest proper suffix)

    ---
    #### `lps[i]` = –¥–æ–≤–∂–∏–Ω–∞ –Ω–∞–π–¥–æ–≤—à–æ–≥–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∞, —è–∫–∏–π –æ–¥–Ω–æ—á–∞—Å–Ω–æ —î —Å—É—Ñ—ñ–∫—Å–æ–º –¥–ª—è –ø—ñ–¥—Ä—è–¥–∫–∞ `pattern[0..i]`.
    > _–ß–∞—Å–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: `O(m)`, –ø–∞–º'—è—Ç—å: `O(m)`._
    """
    m = len(pattern)
    lps = [0] * m
    length = 0
    i = 1
    while i < m:
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1
    return lps


def search(text: str, pattern: str) -> int:
    """## –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è pattern —É text –∞–±–æ `-1` —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

    ---
    > ‚òùüèª _–†–æ–±–æ—Ç–∞: `O(n + m)` –ø–æ —á–∞—Å—É, `O(m)` –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–∞–º'—è—Ç—ñ –¥–ª—è `lps`._
    """
    n = len(text)
    m = len(pattern)
    if m == 0:
        return 0
    if m > n:
        return -1

    lps = compute_lps(pattern)
    i = j = 0
    while i < n:
        if text[i] == pattern[j]:
            i += 1
            j += 1
            if j == m:
                return i - j
        else:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return -1